{"version":3,"sources":["redux/actions/actionTypes.ts","api/index.ts","redux/actions/fetchRobots.ts","containers/App.tsx","redux/actions/filterRobots.ts","redux/enhancers/monitorReducerEnhancer.js","redux/reducers/fetchRobotsReducer.ts","redux/reducers/filterRobotsReducer.ts","redux/reducers/index.ts","redux/store/index.ts","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["FETCH_ROBOTS_START","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","FILTER_ROBOTS_ONCHANGE","instance","axios","create","baseURL","headers","fetchRobotStart","type","fetchRobotSuccess","data","payload","fetchRobotFailed","error","Header","loadable","CardList","SearchBox","Scroll","ErrorBoundary","ConnectedComponent","connect","state","robots","fetchRobot","isLoading","searchField","filterRobot","dispatch","fetchRobots","method","url","then","response","catch","filterRobots","value","trim","connectToStore","props","useEffect","Error","filteredRobots","filter","robot","name","toLowerCase","includes","className","searchChange","event","target","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","action","number","start","performance","now","newState","end","diff","Math","round","console","log","initialStateRobots","fetchRobotsReducer","initialStateSearch","filterRobotsReducer","rootReducer","combineReducers","createLogger","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","preloadedState","middleware","ThunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","configureStore","rootElement","document","getElementById","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","undefined"],"mappings":"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","file":"static/js/main.2b20f6d1.chunk.js","sourcesContent":["export const FETCH_ROBOTS_START: string = 'FETCH_ROBOTS_START';\nexport const FETCH_ROBOTS_SUCCESS: string = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAILED: string = 'FETCH_ROBOTS_FAIL';\nexport const FILTER_ROBOTS_ONCHANGE: string = 'FILTER_ROBOTS_ONCHANGE';\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/',\n  headers: {\n    headers: {\n      'Cache-Control': {\n        'max-age': 31536000,\n      },\n    },\n  },\n});\n\nexport default instance;\n","import { Dispatch } from 'redux';\n\nimport {\n  FETCH_ROBOTS_START,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED,\n} from './actionTypes';\nimport { IRobot } from '../reducers/fetchRobotsReducer';\nimport axios from '../../api/index';\n\nexport const fetchRobots = () => (dispatch: Dispatch) => {\n  dispatch(fetchRobotStart());\n  axios({\n    method: 'GET',\n    url: '/users',\n  })\n    .then((response) => {\n      const { data } = response;\n      dispatch(fetchRobotSuccess(data));\n    })\n    .catch((error) => {\n      dispatch(fetchRobotFailed(error));\n    });\n};\n\nconst fetchRobotStart = () => {\n  return {\n    type: FETCH_ROBOTS_START,\n  };\n};\n\nconst fetchRobotSuccess = (data: Array<IRobot>) => {\n  return {\n    type: FETCH_ROBOTS_SUCCESS,\n    payload: data,\n  };\n};\n\nconst fetchRobotFailed = (error: Error) => {\n  return {\n    type: FETCH_ROBOTS_FAILED,\n    payload: error,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport loadable from '@loadable/component';\n\nimport { fetchRobots, filterRobots } from '../redux/actions/index';\nimport { IRobot } from '../redux/reducers/fetchRobotsReducer';\nimport { RootState } from '../redux/store';\n\nimport './App.css';\n\ninterface AppProps extends PropsFromRedux {}\n\nconst Header = loadable(() => import('../components/Header'));\nconst CardList = loadable(() => import('../components/CardList'));\nconst SearchBox = loadable(() => import('../components/SearchBox'));\nconst Scroll = loadable(() => import('../components/Scroll'));\nconst ErrorBoundary = loadable(() => import('../components/ErrorBoundary'));\n\nconst App = (props: AppProps) => {\n  const { robots, isLoading, error, searchField, fetchRobots, filterRobots } =\n    props;\n\n  useEffect(() => {\n    fetchRobots();\n  }, [fetchRobots]);\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = event;\n    filterRobots(value);\n  };\n\n  if (error) {\n    throw new Error('Something wrong...');\n  }\n\n  const filteredRobots = robots.filter((robot: IRobot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        {isLoading ? (\n          <h1>Loading</h1>\n        ) : (\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        )}\n      </Scroll>\n    </div>\n  );\n};\n\n// react-redux\nconst mapStateToProps = (state: RootState) => {\n  return {\n    robots: state.fetchRobot.robots,\n    isLoading: state.fetchRobot.isLoading,\n    error: state.fetchRobot.error,\n    searchField: state.filterRobot.searchField,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  // ... normally is an object full of action creators\n  return {\n    fetchRobots: () => dispatch(fetchRobots()),\n    filterRobots: (value: string) => dispatch(filterRobots(value)),\n  };\n};\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps);\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(App);\n\ntype PropsFromRedux = ConnectedProps<typeof connectToStore>;\n\nexport default ConnectedComponent;\n","import { Dispatch } from 'redux';\nimport { FILTER_ROBOTS_ONCHANGE } from './actionTypes';\n\nexport const filterRobots = (value: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_ROBOTS_ONCHANGE,\n    payload: value.trim(),\n  });\n};\n","const round = (number) => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer =\n  (createStore) => (reducer, initialState, enhancer) => {\n    const monitoredReducer = (state, action) => {\n      const start = performance.now();\n      const newState = reducer(state, action);\n      const end = performance.now();\n      const diff = round(end - start);\n\n      console.log('reducer process time:', diff);\n\n      return newState;\n    };\n\n    return createStore(monitoredReducer, initialState, enhancer);\n  };\n\nexport default monitorReducerEnhancer;\n","import {\n  FETCH_ROBOTS_START,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED,\n} from '../actions/actionTypes';\n\ndeclare interface IAction {\n  type: string;\n  payload: any;\n}\n\n// Declaring type of props - see \"Typing Component Props\" for more examples\nexport interface IRobot {\n  name: string;\n  id: number;\n  email: string;\n}\n\nexport interface IFetchRobotState {\n  robots: Array<IRobot>;\n  isLoading: boolean;\n  error: null | Error;\n}\n\nconst initialStateRobots: IFetchRobotState = {\n  robots: [],\n  isLoading: true,\n  error: null,\n};\n\nconst fetchRobotsReducer = (\n  state:IFetchRobotState = initialStateRobots,\n  action: IAction\n): IFetchRobotState => {\n  switch (action.type) {\n    case FETCH_ROBOTS_START:\n      return { ...state, isLoading: true };\n    case FETCH_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isLoading: false };\n    case FETCH_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isLoading: false };\n    default:\n      return state;\n  }\n};\n\nexport default fetchRobotsReducer;\n","import { FILTER_ROBOTS_ONCHANGE } from '../actions/actionTypes';\n\ndeclare interface IAction {\n  type: string;\n  payload: any;\n}\n\nexport interface IFilterRobotState {\n  searchField: string;\n}\n\nconst initialStateSearch: IFilterRobotState = {\n  searchField: '',\n};\n\nconst filterRobotsReducer = (\n  state: IFilterRobotState = initialStateSearch,\n  action: IAction\n) => {\n  switch (action.type) {\n    case FILTER_ROBOTS_ONCHANGE:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterRobotsReducer;\n","import { combineReducers } from 'redux';\nimport fetchRobotsReducer, { IFetchRobotState } from './fetchRobotsReducer';\nimport filterRobotsReducer, { IFilterRobotState } from './filterRobotsReducer';\n\nconst rootReducer = combineReducers({\n  fetchRobot: fetchRobotsReducer,\n  filterRobot: filterRobotsReducer,\n});\n\nexport default rootReducer;\n\nexport interface IStore {\n  fetchRobot: IFetchRobotState;\n  filterRobot: IFilterRobotState;\n}\n","import {\n  createStore,\n  applyMiddleware,\n  DeepPartial,\n  Middleware,\n  StateFromReducersMapObject /** , compose */,\n} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport ThunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport monitorReducerEnhancer from '../enhancers/monitorReducerEnhancer';\n// import loggerMiddleware from '../middleware/logger';\nimport rootReducer from '../reducers/index';\n\ntype preloadedState = StateFromReducersMapObject<typeof rootReducer>;\n\nconst logger = createLogger();\n\nexport default function configureStore(\n  preloadedState?: DeepPartial<preloadedState>\n) {\n  let middleware: Array<Middleware> = [ThunkMiddleware];\n\n  if (process.env.NODE_ENV === 'development') {\n    middleware = [...middleware, logger];\n  } else {\n    middleware = [...middleware];\n  }\n\n  const middlewareEnhancer = applyMiddleware(...middleware);\n\n  const enhancers = [middlewareEnhancer, monitorReducerEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('../reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}\n\nexport type store = ReturnType<typeof configureStore>;\nexport type RootState = ReturnType<store['getState']>;\nexport type AppDispatch = store['dispatch'];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport configureStore from './redux/store/index';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register(undefined);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}